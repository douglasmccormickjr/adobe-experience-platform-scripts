{
	"info": {
		"_postman_id": "df5dcaec-76fc-4e69-b648-2c9c0f373cbb",
		"name": "Example Token Generation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10097106"
	},
	"item": [
		{
			"name": "Token",
			"item": [
				{
					"name": "INIT: Load Crypto Library for RS256",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setGlobalVariable(\"jsrsasign_js\", responseBody);",
									"tests[\"Javascript JSR Assign Library load complete\"] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
							"protocol": "https",
							"host": [
								"kjur",
								"github",
								"io"
							],
							"path": [
								"jsrsasign",
								"jsrsasign-latest-all-min.js"
							]
						},
						"description": "Load the RSA-Sign Crypto Library in a global environment variable\n\nSource: http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\n\nGithub: https://github.com/kjur/jsrsasign"
					},
					"response": []
				},
				{
					"name": "IMS: JWT Generate + Auth via User Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);",
									"",
									"if (data.access_token) {",
									"    postman.setEnvironmentVariable(\"ACCESS_TOKEN\", data.access_token);",
									"} else {",
									"    console.log(\"Unable to acquire ACCESS_TOKEN from Adobe IMS to make further calls to Adobe I/O APIs.\")",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Tips from: https://github.com/kjur/jsrsasign/issues/199",
									"// https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWT-generation",
									"",
									"var navigator = {}; //fake a navigator object for the lib",
									"var window = {}; //fake a window object for the lib",
									"eval(postman.getGlobalVariable(\"jsrsasign_js\")); //import javascript jsrsasign",
									"",
									"",
									"var header = {",
									"\t\"alg\": \"RS256\"",
									"};",
									"",
									"var data = {",
									"\t\"exp\": Math.round(87000 + Date.now()/1000),",
									"\t\"iss\": postman.getEnvironmentVariable(\"IMS_ORG\"),",
									"\t\"sub\": postman.getEnvironmentVariable(\"TECHNICAL_ACCOUNT_ID\"),",
									"\t\"aud\": \"https://\" + postman.getEnvironmentVariable(\"IMS\")+\"/c/\"+postman.getEnvironmentVariable(\"API_KEY\")",
									"};",
									"",
									"meta_scopes = postman.getEnvironmentVariable(\"META_SCOPE\");",
									"meta_scopes.forEach(function(scope){",
									"    var meta_scope = \"https://\" + postman.getEnvironmentVariable(\"IMS\")+\"/s/\"+",
									"                     scope;",
									"    data[meta_scope] = true;",
									"});",
									"",
									"var secret = postman.getEnvironmentVariable(\"PRIVATE_KEY\");",
									"",
									"if (!secret) {",
									"    console.log(\"Ensure the Private Key is added to both INITIAL and CURRENT VALUES in the active Postman environment's PRIVATE_KEY variable.\");",
									"}",
									"",
									"console.log(data);",
									"",
									"var sHeader = JSON.stringify(header);",
									"var sPayload = JSON.stringify(data);",
									"var sJWT = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, secret);",
									"",
									"console.log(sJWT);",
									"",
									"postman.setEnvironmentVariable(\"JWT_TOKEN\", sJWT);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "{{API_KEY}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"type": "text"
								},
								{
									"key": "jwt_token",
									"value": "{{JWT_TOKEN}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{IMS}}/ims/exchange/jwt/",
							"protocol": "https",
							"host": [
								"{{IMS}}"
							],
							"path": [
								"ims",
								"exchange",
								"jwt",
								""
							]
						},
						"description": "Generate a JWT token using the Crypto RS256\nSend to IMS for access_token"
					},
					"response": []
				},
				{
					"name": "Retrieve a sandbox by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/** Begin Adobe-provided Pre-Request Scripts **/",
									"// Do not send HTTP Headers with empty variables, as Postman will send the literal variable name",
									"pm.request.headers.each(header => {",
									"    if (header.value.startsWith(\"{{\") && header.value.endsWith(\"}}\")) {",
									"        if (!pm.variables.get(header.value.substring(2, header.value.length - 2))) { pm.request.headers.remove(header.key); }",
									"    }",
									"});",
									"",
									"// Do not send HTTP URL Query Parameters with empty variables, as Postman will send the literal variable name",
									"pm.request.url.query.remove(q => { ",
									"    if (q.value.startsWith(\"{{\") && q.value.endsWith(\"}}\")) {",
									"        return !pm.variables.get(q.value.substring(2, q.value.length - 2));",
									"    } ",
									"});",
									"/** End Adobe-provided Pre-Request Scripts **/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{ACCESS_TOKEN}}",
								"description": "The access token which can be copied from your Experience Platform integration, prefixed with \"Bearer\". For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html).",
								"type": "string"
							},
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "The API key which can be copied from your Experience Platform integration, prefixed with \"Bearer\". For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html).",
								"type": "string"
							},
							{
								"key": "x-gw-ims-org-id",
								"value": "{{IMS_ORG}}",
								"description": "The access token which can be copied from your Experience Platform integration, prefixed with \"Bearer\". For more information on how to obtain this value, visit the [authentication tutorial](https://docs.adobe.com/content/help/en/experience-platform/tutorials/authentication.html).",
								"type": "string"
							},
							{
								"key": "x-sandbox-name",
								"value": "{{SANDBOX_NAME}}",
								"description": "The name of the sandbox in which the operation will take place. See the [sandboxes overview documentation](https://docs.adobe.com/content/help/en/experience-platform/sandbox/home.html) for more information.",
								"type": "string"
							},
							{
								"key": "x-user-token",
								"value": "{{x-user-token}}",
								"description": "The access token for the current user. If present, this token is instead of the token in the Authorization header to lookup sandboxes.",
								"type": "string"
							}
						],
						"url": {
							"raw": "https://platform.adobe.io/data/foundation/sandbox-management/sandboxes/:sandboxName",
							"protocol": "https",
							"host": [
								"platform",
								"adobe",
								"io"
							],
							"path": [
								"data",
								"foundation",
								"sandbox-management",
								"sandboxes",
								":sandboxName"
							],
							"variable": [
								{
									"key": "sandboxName",
									"value": "{{SANDBOX_NAME}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This API call genereated the signed JWT Token locally and the Private Key does not leave this machine, however this set of API calls does load the JSR Assign Crypto library from a non-Adone end-point (https://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js), therefore it not recommended for use with Production credentials.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}